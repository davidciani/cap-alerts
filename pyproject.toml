[project]
name = "cap-alerts"
version = "0.1.0"
description = "Add your description here"
readme = "README.md"
authors = [
    { name = "David Ciani", email = "dciani@davidciani.com" }
]
requires-python = "==3.13.*"
dependencies = [
    "aiofiles>=24.1.0",
    "click>=8.1.8",
    "flask>=3.1.2",
    "geoalchemy2>=0.17.1",
    "httpx>=0.27.2",
    "lxml>=5.3.0",
    "msgspec>=0.18.6",
    "psycopg[binary,pool]>=3.2.3",
    "pyparsing>=3.2.0",
    "python-dateutil>=2.9.0.post0",
    "rich>=13.9.4",
    "shapely>=2.0.6",
    "sqlalchemy[asyncio]>=2.0.36",
    "types-lxml>=2024.11.8",
]

[project.optional-dependencies]
maintain = [
    "black>=23.9",
    "blacken-docs>=1.16",
    "git-changelog>=2.3",
]
quality = [
    "ruff>=0.0",
]
tests = [
    "pytest>=7.4",
    "pytest-cov>=4.1",
    "pytest-randomly>=3.15",
    "pytest-xdist>=3.3",
]
typing = [
    "mypy>=1.5",
    "types-markdown>=3.5",
    "types-pyyaml>=6.0",
]
security = [
    "safety>=2.3",
]

[project.scripts]
ipaws-alerts = "cap_alerts:main"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"



[tool.coverage.run]
branch = true
parallel = true
source =[
  "src/",
  "tests/"
  ]

[tool.coverage.paths]
equivalent =[
  "src/"
  ]

[tool.coverage.report]
precision = 2
omit =[
  "src/*/__init__.py",
  "src/*/__main__.py",
  "tests/__init__.py"
  ]

exclude_lines =[
  "pragma: no cover",
  "if TYPE_CHECKING"
  ]

[tool.coverage.json]
output = "htmlcov/coverage.json"


[tool.pytest.ini_options]
norecursedirs =[
  ".git",
  ".tox",
  ".env",
  "dist",
  "build",
  ]

python_files =[
  "test_*.py",
  "*_test.py",
  "tests.py"
]

addopts =[
  "--cov"
  ]

testpaths =[
  "tests"
]

# action:message_regex:warning_class:module_regex:line
filterwarnings =[
  "error",
  # TODO: remove once pytest-xdist 4 is released
  "ignore:.*rsyncdir:DeprecationWarning:xdist"
]

[tool.mypy]
ignore_missing_imports = true
exclude = "tests/fixtures/"
warn_unused_ignores = true
show_error_codes = true

[tool.ruff]
line-length = 88
indent-width = 4

[tool.ruff.lint]
select = [

    # default rules

    "F", # pyflakes
    "E4", "E7","E9", # pycoodestyle

    ## Extra Rules

    "E", # pycoodestyle
    "W" , # pycoodestyle
    "C90", # mccabe
    "I", # isort
    "N", # pep8-naming
    "D", # pydocstyle
    "UP", # pyupgrade
    "ERA", # eradicate
    "PGH", # pygrep-hooks
    "PL", # pylint
    "TRY", # tryceratops
    "FLY", # flynt
    "PERF", # perflint
    "FURB", # refurb
    "RUF", # Ruff-specific rules

    # All the Flake8 Rules
    
    "YTT", # flake8-2020
    "ANN", # flake8-annotations
    "ASYNC", # flake8-async
    "S", # flake8-bandit
    "BLE", # flake8-blind-except
    "FBT", # flake8-boolean-trap
    "B", # flake8-bugbear
    "A", # flake8-builtins
    "COM", # flake8-commas
    "CPY", # flake8-copyright
    "C4", # flake8-comprehensions
    "DTZ", # flake8-datetimez
    "T10", # flake8-debugger
    "EM", # flake8-errmsg
    "EXE", # flake8-executable
    "FA", # flake8-future-annotations
    "ISC", # flake8-implicit-str-concat
    "ICN", # flake8-import-conventions
    "LOG", # flake8-logging
    "G", # flake8-logging-format
    "INP", # flake8-no-pep420
    "PIE", # flake8-pie
    "T20", # flake8-print
    "PYI", # flake8-pyi
    "PT", # flake8-pytest-style
    "Q", # flake8-quotes
    "RSE", # flake8-raise
    "RET", # flake8-return
    "SLF", # flake8-self
    "SLOT", # flake8-slots
    "SIM", # flake8-simplify
    "TID", # flake8-tidy-imports
    "TC", # flake8-type-checking
    "ARG", # flake8-unused-arguments
    "PTH", # flake8-use-pathlib
    "TD", # flake8-todos
    "FIX", # flake8-fixmes
    
]
ignore = [
    "D105",  # Missing docstring in magic method
    "D417",  # Missing argument description in the docstring
]


[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"


[tool.ruff.lint.per-file-ignores]
"tests/*.py" = [
    #"ARG005",  # Unused lambda argument
    #"FBT001",  # Boolean positional arg in function definition
    #"PLR2004",  # Magic value used in comparison
    "S101",  # Use of assert detected
]

[tool.ruff.lint.flake8-quotes]
docstring-quotes = "double"

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.lint.pydocstyle]
convention = "google"


[tool.git-changelog]
bump = "auto"
convention = "conventional"
in-place = true
output = "CHANGELOG.md"
parse-refs = false
parse-trailers = true
sections = [
  "feat",
  "fix",
  "perf",
  "ref",
  "doc",
  "revert",
  "tests",
  "build",
  "deps",
  "chore",
  "ci",
  "style"
  ]
template = "angular"